name: CI Pipeline for Develop

on:
  push:
    branches:
      - Test-CD/CI-Pipeline-Aktan  # Пайплайн запускается при пуше в ветку develop

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонируем репозиторий
      - name: Checkout Code
        uses: actions/checkout@v3

      # Шаг 2: Устанавливаем Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Шаг 3: Устанавливаем зависимости
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Шаг 4: Устанавливаем переменные окружения
      - name: Set Environment Variables
        run: |
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      # Шаг 5: Запускаем тесты
      - name: Run Tests
        env:
          DJANGO_SETTINGS_MODULE: config.settings
        run: |
          python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test  # Этот шаг выполняется только если тесты прошли успешно

    steps:
      # Шаг 1: Клонируем репозиторий
      - name: Checkout Code
        uses: actions/checkout@v3

      # Шаг 2: Устанавливаем Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Шаг 3: Логинимся в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Шаг 4: Сборка Docker-образа
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg DEBUG="${{ secrets.DEBUG }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg DB_USER="${{ secrets.DB_USER }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
            --build-arg DB_PORT="${{ secrets.DB_PORT }}" \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            -t saikal123/studyplatform:Test-CD/CI-Pipeline-Aktan.

      # Шаг 5: Пушим образ в Docker Hub
      - name: Push Docker Image
        run: |
          docker push saikal123/studyplatform:Test-CD/CI-Pipeline-Aktan

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [test, build]  # Запускаем deploy, только если тесты и build прошли успешно

  #   steps:
  #     # Шаг 1: Клонируем репозиторий
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     # Шаг 2: Настройка SSH ключа
  #     - name: Set up SSH private key
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
  #       env:
  #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #         SERVER_IP: ${{ secrets.SERVER_IP }}

  #     # Шаг 3: Деплой Docker-контейнера
  #     - name: Deploy Docker container
  #       run: |
  #         ssh -i ~/.ssh/id_rsa root@$SERVER_IP << EOF
  #         docker pull saikal123/studyplatform:develop
  #         docker stop studyplatform || true
  #         docker rm studyplatform || true
  #         docker run -d \
  #           --name studyplatform \
  #           -e DEBUG=${{ secrets.DEBUG }} \
  #           -e DB_NAME=${{ secrets.DB_NAME }} \
  #           -e DB_USER=${{ secrets.DB_USER }} \
  #           -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
  #           -e DB_HOST=${{ secrets.DB_HOST }} \
  #           -e DB_PORT=${{ secrets.DB_PORT }} \
  #           -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
  #           -p 8000:8000 \
  #           saikal123/studyplatform:develop
  #         EOF
  #       env:
  #         SERVER_IP: ${{ secrets.SERVER_IP }}
